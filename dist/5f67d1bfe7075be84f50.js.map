{"version":3,"sources":["webpack://RapidForm/webpack/universalModuleDefinition","webpack://RapidForm/./helpers/typesInput.tsx","webpack://RapidForm/./helpers/typesManager.tsx","webpack://RapidForm/./helpers/validation.ts","webpack://RapidForm/./helpers/themes.tsx","webpack://RapidForm/./components/button/Button.tsx","webpack://RapidForm/./components/form/Form.tsx","webpack://RapidForm/./components/input/Text.tsx","webpack://RapidForm/./components/input/File.tsx","webpack://RapidForm/./components/select/Select.tsx","webpack://RapidForm/./containers/button/ButtonContainer.ts","webpack://RapidForm/./constants/input.ts","webpack://RapidForm/./types/action.ts","webpack://RapidForm/./reducers/form/form.ts","webpack://RapidForm/./containers/form/FormContainer.ts","webpack://RapidForm/./containers/input/TextContainer.ts","webpack://RapidForm/./containers/input/FileContainer.ts","webpack://RapidForm/./containers/select/SelectContainer.ts","webpack://RapidForm/./reducers/index.ts","webpack://RapidForm/./index.tsx"],"names":["root","factory","exports","module","define","amd","window","helpers_typesInput","type","props","key","theme","react","TextContainer","Object","assign","data-key","FileContainer","undefined","console","error","warn","typesManager","typeCmp","cmp","formid","ButtonContainer","SelectContainer","children","otherProps","__rest","hasChild","Reflect","get","Array","isArray","length","nc","map","c","i","tc","valueOf","pc","typeChild","propsChild","newChildren","helpers_typesManager","analizeRequiredFields","formFields","submitResult","checker","cmps","propsCmps","toJS","required","name","validation_rest","requiredChild","nameChild","push","check","find","el","validation","method","val","r","immutable","split","m","set","helpers_themes","[object Object]","themeName","this","handleInputFile","inputFile","click","renderField","value","TextField_default","a","va","err","pr","themes_rest","Button_default","variant","onClick","FileUpload_default","ref","style","display","Typography_default","child","other","p","multiple","placeholder","withChip","multiCheckbox","deleteProperty","input","Input_default","id","inputProps","v","renderValue","selected","lab","k","Chip_default","label","join","material_ui_Form","Input","htmlFor","Select_default","renderMultipleSelect","native","options","option","checked","indexOf","Menu","Checkbox_default","List","primary","component","override","styles","Button_Button","handleRenderByTheme","_a","errors","allProps","Button_rest","themeClass","disabled","size","dispatch","propTypes","prop_types","className","isRequired","button_Button","Form_Form","renderByThemes","overrideTheme","renderByTheme","readChildren","prc","propsComponent","ps","handleSubmit","event","onSubmit","fields","checkAllReqFields","preventDefault","formElement","document","querySelector","data","form_serialize","hash","isEmpty","keys","isValid","setFields","setTheme","nextProps","content","form_Form","Text_Text","handleValidation","setCheckError","checkError","Text_rest","target","onChange","input_Text","File_Text","File_rest","files","File","Select_Select","Select_rest","select_Select","es","button","form","ownProps","constants_input","Action","payload","initialState","SET_FIELDS","SET_THEME","SET_ERRORS","SET_CHECK_ERROR","form_setFields","form_setTheme","form_checkAllReqFields","getState","valChild","reqChild","dataValidation","dataVal","field","typeError","e","setIn","filter","getIn","delete","analizeErrors","removeError","propsCmp","nwProps","analizeFields","newField","merge","update","form_form","state","action","fs","FormContainer","redux_es","form_namespaceObject","select","reducers","cps","redux_devtools_extension","lib_default","store","__webpack_exports__","index_rest"],"mappings":"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","file":"5f67d1bfe7075be84f50.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RapidForm\"] = factory();\n\telse\n\t\troot[\"RapidForm\"] = factory();\n})(window, function() {\nreturn ","import { FileContainer, TextContainer } from 'containers'\nimport * as React from 'react'\n\nconst typesInput = (type: string, props: any, key?: string, theme?: string) => {\n  switch (type) {\n    case 'text':\n    case 'password':\n    case 'email':\n    case 'hidden':\n      return <TextContainer key={key} data-key={key} {...props} />\n    case 'file':\n      return <FileContainer key={key} data-key={key} {...props} />\n    case undefined:\n      console.error('Warning: The prop `type` is marked as required, but its value is `undefined`')\n      return null\n    default:\n      console.warn(`Warning: This prop type='${type}' is not supported`)\n      return null\n  }\n}\n\nexport default typesInput\n","// import { TextContainer } from 'containers'\nimport { ButtonContainer, SelectContainer } from 'containers'\nimport * as React from 'react'\nimport typesInput from './typesInput'\n\ninterface IPropsTypes {\n  type?: string,\n  children?: any,\n  formid?: any\n}\n\nconst typesManager = (typeCmp: any|string, props: IPropsTypes, key?: string, cmp?: any): null|any => {\n  const { formid } = props\n  switch (typeCmp) {\n    case 'input':\n      const { type } = props\n      return typesInput(type, props, key)\n    case 'button':\n      return <ButtonContainer {...props} />\n    case 'select':\n      return <SelectContainer data-key={key} {...props} />\n    case undefined:\n      console.error('Warning: The prop `type` is marked as required, but its value is `undefined`')\n      return null\n    default:\n      const { children, ...otherProps } = props\n      const hasChild = Reflect.get(props, 'children')\n      if (Array.isArray(hasChild) && hasChild.length > 1) {\n        const nc = hasChild.map((c: any, i: any) => {\n          const tc = Reflect.get(c.valueOf(), 'type')\n          const pc = Reflect.get(c.valueOf(), 'props')\n          return typesManager(tc, {...pc, formid}, i, c)\n        })\n        return React.createElement(typeCmp, {...otherProps, key, formid}, nc)\n      }\n      if (typeof hasChild === 'string') {\n        return React.createElement(typeCmp, {...otherProps, key, formid}, hasChild)\n      }\n      const typeChild = Reflect.get(hasChild.valueOf(), 'type')\n      const propsChild = Reflect.get(hasChild.valueOf(), 'props')\n      const newChildren = typesManager(typeChild, {...propsChild, formid}, key, hasChild)\n      return React.createElement(typeCmp, {...otherProps, key, formid}, newChildren)\n  }\n}\n\nexport default typesManager\n","import { fromJS, List, Map } from 'immutable'\nimport * as React from 'react'\n\n/**\n * analizeFields\n * @param formFields any[]\n * @param removeError any\n * @param value string\n */\nexport const analizeFields = (formFields: any[], removeError?: any, value = '') => {\n  return formFields.map((cmps: any): any => {\n    const type = cmps.get('type')\n    const key = cmps.get('key')\n    const propsCmps = cmps.get('props').toJS()\n    const { children, ...propsCmp } = propsCmps\n    if (children) {\n      const { props } = children\n      if (Array.isArray(children)) {\n        // TODO: You must complete this part\n        return null\n      }\n      const nwProps = {...props, error: !removeError, value}\n      return fromJS(\n        React.createElement(type, {...propsCmp, key}, React.cloneElement(\n          children, nwProps\n        ))\n      )\n    }\n    const p = {...propsCmp, error: !removeError}\n    return fromJS(\n      React.createElement(type, {...p, key, value})\n    )\n  })\n}\n\nexport const analizeRequiredFields = (formFields: any, submitResult: any): any[] => {\n  const checker: any[] = []\n  formFields.map((cmps: any): any => {\n    const type = cmps.get('type')\n    const key = cmps.get('key')\n    const propsCmps = cmps.get('props').toJS()\n    const { children, required, name, ...propsCmp } = propsCmps\n    if (children) {\n      const { props } = children\n      const { required: requiredChild, name: nameChild } = props\n      if (Array.isArray(children)) {\n        // TODO: You must complete this part\n      }\n      if (requiredChild && !Reflect.get(submitResult, nameChild)) {\n        checker.push({name: nameChild, check: false})\n      } else if (name) {\n        checker.push({name: nameChild, check: true})\n      }\n    }\n    if (required && !Reflect.get(submitResult, name)) {\n      checker.push({name, check: false})\n    } else if (name) {\n      checker.push({name, check: true})\n    }\n  })\n  return checker.find((el: { check: any }): any => {\n    const { check } = el\n    if (check === false) {\n      return true\n    }\n    return false\n  })\n}\n\nexport const analizeErrors = (formid: string, key: number, name: string, errors: any, typeError: any) => {\n  const e = errors.get(formid)\n  if (typeError.size > 0) {\n    return errors.setIn([formid, key], fromJS({name, ...typeError.toJS()})).filter((v: any) => v !== undefined)\n  }\n  if (e && e.size > 0 && e.getIn([`${key}`, 'name']) === name) {\n    if (e.size === 1) {\n      return e.delete('0')\n    }\n    return errors.setIn([formid], e.delete(`${key}`))\n  }\n  return errors\n}\n\n/**\n * @param method string\n * @retutn any\n */\nconst validationMethod = (method: string, val: any): any => {\n  let r = Map()\n  const explodeMethod = method.split(',')\n  explodeMethod.map((m) => {\n    switch (m) {\n      case 'empty':\n      default:\n        if (val === '' || val === undefined || Array.isArray(val) && val.length === 0) {\n          r = r.set(m, true)\n        }\n        break\n    }\n  })\n  return r\n}\n\nexport default validationMethod\n","import FileUpload from 'material-ui-icons/FileUpload'\nimport Button from 'material-ui/Button'\nimport Checkbox from 'material-ui/Checkbox'\nimport Chip from 'material-ui/Chip'\nimport { FormControl } from 'material-ui/Form'\nimport Input, { InputLabel } from 'material-ui/Input'\nimport { ListItemText } from 'material-ui/List'\nimport Menu, { MenuItem } from 'material-ui/Menu'\nimport Select from 'material-ui/Select'\nimport { createMuiTheme, MuiThemeProvider } from 'material-ui/styles'\nimport TextField from 'material-ui/TextField'\nimport Typography from 'material-ui/Typography'\nimport * as React from 'react'\n\n/**\n * Themes\n */\nclass Themes {\n  private themeName: string\n  constructor (themeName: string) {\n    this.themeName = themeName\n  }\n  public renderByTheme (component: any, override = {}): JSX.Element {\n    switch (this.themeName) {\n      case 'material-ui':\n        const theme = createMuiTheme(override)\n        // Old material-UI\n        return (\n          <div>\n            <MuiThemeProvider theme={theme}>{component}</MuiThemeProvider>\n          </div>\n        )\n        // return component\n      default:\n        return component\n    }\n  }\n  private handleInputFile = (): void => {\n    this.inputFile.click()\n  }\n  private renderField = (type: string, props: any, cmp?: any): JSX.Element => {\n    switch (this.themeName) {\n      case 'material-ui':\n        switch (type) {\n          case 'text':\n          case 'email':\n          case 'password':\n          case 'hidden':\n            const { value: val } = props\n            return <TextField type={type} {...props} value={val || ''} />\n          case 'file':\n            const { value: va, error: err, ...pr } = props\n            return (\n              <div>\n                <Button variant='raised' onClick={this.handleInputFile}>\n                  {'upload'}\n                  <FileUpload />\n                  <input\n                    ref={(r) => {this.inputFile = r}}\n                    style={{ display: 'none' }}\n                    type={type}\n                    {...pr}\n                  />\n                </Button>\n                <Typography type='subheading'>{va || ''}</Typography>\n              </div>\n            )\n          case 'button':\n            const { children: child , ...other } = props\n            return <Button {...other}>{child}</Button>\n          case 'select':\n            const { children , ...p } = props\n            const { multiple, value, placeholder, withChip, multiCheckbox, error, required } = p\n            Reflect.deleteProperty(p, 'withChip')\n            Reflect.deleteProperty(p, 'multiCheckbox')\n            const input = <Input id='select-placeholder' />\n            const inputProps = { required }\n            if (multiple) {\n              Reflect.deleteProperty(p, 'value')\n              const v = value === '' || !value ? [] : value\n              const renderValue = !withChip\n                ? (selected: any) => selected.join(', ')\n                : (selected: any): any => {\n                  if (selected) {\n                    return selected.map((lab: any, k: number) => {\n                      return <Chip key={k} label={lab} />\n                    })\n                  }\n                  return []\n                }\n              return !placeholder\n                ? (\n                  <Select value={v} renderValue={renderValue} inputProps={inputProps} {...p}>\n                    {this.renderMultipleSelect(children, v, multiCheckbox)}\n                  </Select>\n                ) : (\n                  <FormControl error={error}>\n                    <InputLabel htmlFor='select-placeholder'>{placeholder}</InputLabel>\n                    <Select inputProps={inputProps} value={v} renderValue={renderValue} input={input} {...p}>\n                      {this.renderMultipleSelect(children, v, multiCheckbox)}\n                    </Select>\n                  </FormControl>\n                )\n            }\n            return !placeholder\n              ? <Select native inputProps={inputProps} {...p}>{children}</Select>\n              : (\n                <FormControl error={error}>\n                  <InputLabel htmlFor='select-placeholder'>{placeholder}</InputLabel>\n                  <Select native input={input} inputProps={inputProps} {...p}>{children}</Select>\n                </FormControl>\n              )\n          default:\n            return cmp\n        }\n      default:\n        return cmp\n    }\n  }\n  private renderMultipleSelect = (options: any, val: any[], multiCheckbox?: boolean): any[] => {\n    const opts = Array.isArray(options) ? options : [options]\n    return opts.map((option: any, key: number): JSX.Element => {\n      const { props } = option\n      const { value, children, ...other } = props\n      const checked = Array.isArray(val) ? val.indexOf(value) > -1 : false\n      return multiCheckbox ? (\n        <MenuItem key={key} value={value} {...other}>\n          <Checkbox checked={checked} />\n          <ListItemText primary={children} />\n        </MenuItem>\n      ) : (\n        <MenuItem key={key} value={value} {...other}>\n          <ListItemText primary={children} />\n        </MenuItem>\n      )\n    })\n  }\n}\n\nexport default Themes\n","import { Themes } from 'helpers'\nimport { Map } from 'immutable'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { callbackOnClick } from 'types'\n\n/**\n * @export\n * @interface IProps\n */\nexport interface IProps {\n  children?: any,\n  className?: string,\n  key?: string,\n  name?: string,\n  formid: string,\n  type: string,\n  theme: string,\n  dispatch?: () => void,\n  style?: object,\n  onClick?: callbackOnClick,\n  errors?: any\n}\n\n/**\n * @class Button\n * @extends {React.Component<IProps, any>}\n */\nclass Button extends React.Component<IProps, any> {\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element\n    ]),\n    className: PropTypes.string,\n    errors: PropTypes.instanceOf(Map),\n    formid: PropTypes.string.isRequired,\n    key: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    name: PropTypes.string,\n    style: PropTypes.object,\n    theme: PropTypes.string,\n    type: PropTypes.oneOf([\n      'submit', 'reset', 'button', 'menu'\n    ]).isRequired\n  }\n  public render (): JSX.Element {\n    const { dispatch, children, ...allProps } = this.props\n    return this.handleRenderByTheme()\n  }\n  private handleRenderByTheme = (): JSX.Element => {\n    const { children, theme, errors, formid, ...allProps } = this.props\n    const themeClass = new Themes(theme)\n    const disabled = errors.get(formid) && errors.get(formid).size > 0\n    const p = { ...allProps, disabled }\n    const cmp = <button {...p}>{children}</button>\n    return themeClass.renderField('button', {...p, children}, cmp)\n  }\n}\n\nexport default Button\n","import * as serialize from 'form-serialize'\nimport { analizeRequiredFields, Themes, typesManager } from 'helpers'\nimport { List, Map } from 'immutable'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { callbackSubmit } from 'types'\n\n/**\n * @interface IFormProps\n */\ninterface IFormProps {\n  error?: any[],\n  id: string,\n  method: string,\n  key?: string,\n  name?: string,\n  disabled?: boolean\n  onSubmit?: callbackSubmit,\n  children?: [React.ReactNode, any[]],\n  fields?: any,\n  setFields?: (fields: any[], id: string) => void,\n  setTheme?: (theme: string) => void,\n  overrideTheme?: object,\n  checkAllReqFields?: (id: string) => void,\n  theme: string\n}\n\n/**\n * Main component\n * @class Form\n * @extends {React.Component<IFormProps, any>}\n */\nclass Form extends React.Component<IFormProps, any> {\n  static propTypes = {\n    checkAllReqFields: PropTypes.func.isRequired,\n    fields: PropTypes.instanceOf(Map),\n    id: PropTypes.string.isRequired,\n    method: PropTypes.oneOf(['get', 'post']).isRequired,\n    onSubmit: PropTypes.func,\n    overrideTheme: PropTypes.object,\n    setFields: PropTypes.func.isRequired,\n    setTheme: PropTypes.func.isRequired,\n    theme: PropTypes.oneOf(['material-ui'])\n  }\n  componentDidMount (): void {\n    const { fields, setFields, setTheme, theme, id } = this.props\n    if (fields instanceof Map) {\n      setFields(this.readChildren(), id)\n    }\n    if (theme) {\n      setTheme(theme)\n    }\n  }\n  componentWillUpdate (nextProps: any): void {\n    const { fields, setFields } = this.props\n    const { id } = nextProps\n    const f = fields.find((v: any, k: any) => k === id)\n    if (!f && fields.size > 0) {\n      setFields(this.readChildren(), id)\n    }\n  }\n  public render (): any {\n    const { children, id, name, fields, onSubmit, method } = this.props\n    const content = fields.get(id) ? fields.get(id).toJS() : null\n    return this.renderByThemes((\n      <form key={id} id={id} name={name || id} method={method} onSubmit={this.handleSubmit}>\n        {content}\n      </form>\n    ))\n  }\n  private renderByThemes = (cmp: JSX.Element) => {\n    const { theme, overrideTheme } = this.props\n    const themes = new Themes(theme)\n    return themes.renderByTheme(cmp, overrideTheme)\n  }\n  private readChildren = (): any[] => {\n    const { children, id, key, theme } = this.props\n    if (children.length > 1) {\n      return children.map((i, k) => {\n        const prc = Reflect.get(i.valueOf(), 'props')\n        const typeCmp = Reflect.get(i.valueOf(), 'type')\n        const p = {...prc, formid: id}\n        return typesManager(typeCmp, p, `${k}`, i)\n      })\n    }\n    const propsComponent = Reflect.get(children.valueOf(), 'props')\n    const type = Reflect.get(children.valueOf(), 'type')\n    const ps = {...propsComponent, formid: id}\n    return [typesManager(type, ps, !key && id)]\n  }\n  private handleSubmit = (event: any): void => {\n    const { onSubmit, id, fields, checkAllReqFields } = this.props\n    event.preventDefault()\n    const formElement = document.querySelector(`#${id}`)\n    const data = serialize(formElement, { hash: true })\n    const nElement = Object.keys(data).length\n    const isEmpty = nElement === 0\n    const isValid = analizeRequiredFields(fields.get(id), data)\n    if (typeof onSubmit === 'function' && !isEmpty && isValid === undefined) {\n      return onSubmit(event, data)\n    }\n    checkAllReqFields(id)\n  }\n}\n\nexport default Form\n","import { Themes, validationMethod } from 'helpers'\nimport { Map } from 'immutable'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { callbackOnClick, setCheckError } from 'types'\n\nexport interface ITextProps {\n  children?: any,\n  className?: string,\n  key?: string,\n  name?: string,\n  type: string,\n  value?: string,\n  theme?: string,\n  onClick?: callbackOnClick,\n  setCheckError?: setCheckError\n}\n\nclass Text extends React.Component<ITextProps, any> {\n  static propTypes = {\n    className: PropTypes.string,\n    key: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    name: PropTypes.string,\n    setCheckError: PropTypes.func,\n    style: PropTypes.object,\n    theme: PropTypes.string,\n    type: PropTypes.oneOf([\n      'text', 'password', 'email', 'hidden'\n    ]).isRequired\n  }\n  public render (): JSX.Element {\n    return this.handleRenderByTheme()\n  }\n  private handleValidation = (event: any): any => {\n    const { setCheckError: checkError, ...props } = this.props\n    const method = Reflect.get(this.props, 'data-validation')\n    const val = Reflect.get(event.target, 'value')\n    const required = Reflect.get(props, 'required')\n    const key = Reflect.get(props, 'data-key')\n    const isValid = validationMethod(method, val)\n    if (!method || !required) {\n      return checkError({...props, value: val}, key, Map())\n    }\n    checkError({...props, value: val}, key, isValid)\n  }\n  private handleRenderByTheme = (): JSX.Element => {\n    const { setCheckError: checkError, theme, type, ...allProps } = this.props\n    const themeClass = new Themes(theme)\n    const cmp = <input {...allProps} onChange={this.handleValidation} />\n    const props = { onChange: this.handleValidation, ...allProps }\n    return themeClass.renderField(type, props, cmp)\n  }\n}\n\nexport default Text\n","import { Themes, validationMethod } from 'helpers'\nimport { Map } from 'immutable'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { callbackOnClick, setCheckError } from 'types'\n\nexport interface ITextProps {\n  children?: any,\n  className?: string,\n  key?: string,\n  name?: string,\n  type: string,\n  value?: string,\n  theme?: string,\n  onClick?: callbackOnClick,\n  setCheckError?: setCheckError\n}\n\nclass Text extends React.Component<ITextProps, any> {\n  static propTypes = {\n    className: PropTypes.string,\n    key: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    name: PropTypes.string,\n    setCheckError: PropTypes.func,\n    style: PropTypes.object,\n    theme: PropTypes.string,\n    type: PropTypes.oneOf(['file']).isRequired\n  }\n  public render (): JSX.Element {\n    return this.handleRenderByTheme()\n  }\n  private handleValidation = (event: any): any => {\n    const { setCheckError: checkError, ...props } = this.props\n    const method = Reflect.get(this.props, 'data-validation')\n    const val = Reflect.get(event.target.files[0], 'name')\n    const required = Reflect.get(props, 'required')\n    const key = Reflect.get(props, 'data-key')\n    const isValid = validationMethod(method, val)\n    if (!method || !required) {\n      return checkError({...props, value: val}, key, Map())\n    }\n    checkError({...props, value: val}, key, isValid)\n  }\n  private handleRenderByTheme = (): JSX.Element => {\n    const { setCheckError: checkError, theme, type, ...allProps } = this.props\n    const themeClass = new Themes(theme)\n    const cmp = <input {...allProps} onChange={this.handleValidation} />\n    const props = { onChange: this.handleValidation, ...allProps }\n    return themeClass.renderField(type, props, cmp)\n  }\n}\n\nexport default Text\n","import { Themes, validationMethod } from 'helpers'\nimport { Map } from 'immutable'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { callbackOnClick, setCheckError } from 'types'\n\n/**\n * @export\n * @interface IProps\n */\nexport interface IProps {\n  children?: any,\n  className?: string,\n  key?: string,\n  name?: string,\n  type: string,\n  theme: string,\n  dispatch?: () => void,\n  setCheckError?: setCheckError,\n  style?: object,\n  onClick?: callbackOnClick,\n  errors?: any\n}\n\n/**\n * @class Select\n * @extends {React.Component<IProps, any>}\n */\nclass Select extends React.Component<IProps, any> {\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n      PropTypes.array\n    ]),\n    className: PropTypes.string,\n    errors: PropTypes.instanceOf(Map),\n    key: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    name: PropTypes.string,\n    setCheckError: PropTypes.func,\n    style: PropTypes.object,\n    theme: PropTypes.string\n  }\n  public render (): JSX.Element {\n    const { dispatch, children, ...allProps } = this.props\n    return this.handleRenderByTheme()\n  }\n  private handleValidation = (event: any): any => {\n    const { setCheckError: checkError, ...props } = this.props\n    const method = Reflect.get(this.props, 'data-validation')\n    const val = Reflect.get(event.target, 'value')\n    const required = Reflect.get(props, 'required')\n    const key = Reflect.get(props, 'data-key')\n    const isValid = validationMethod(method, val)\n    if (!method || !required) {\n      return checkError({...props, value: val}, key, Map())\n    }\n    checkError({...props, value: val}, key, isValid)\n  }\n  private handleRenderByTheme = (): JSX.Element => {\n    const { setCheckError: checkError, children, theme, errors, ...allProps } = this.props\n    const themeClass = new Themes(theme)\n    const cmp = <select {...allProps}>{children}</select>\n    const props = { onChange: this.handleValidation, ...allProps }\n    return themeClass.renderField('select', {...props, children}, cmp)\n  }\n}\n\nexport default Select\n","import { Button } from 'components'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\ninterface IState {\n  button: object,\n  form: {\n    theme: string,\n    errors: any\n  }\n}\n\nconst mapStateToProps = ({ button, form: { theme, errors } }: IState, props: any): any => {\n  return { ...button, ...props, theme, errors }\n}\n\nconst mapDispatchToProps = (dispatch: any, ownProps: any): any => {\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button)\n","const inputTypes: any[] = ['text', 'password']\nexport default inputTypes\n","interface IActionForm {\n  id?: string,\n  payload: any,\n  type: string,\n  fields?: any,\n  theme?: string,\n  errors?: any\n}\n\nexport const Action: IActionForm = {\n  payload: null,\n  type: ''\n}\n","import { inputTypes } from 'constants'\nimport { analizeErrors, analizeFields, validationMethod } from 'helpers'\nimport { fromJS, Map } from 'immutable'\nimport { Action } from 'types'\n\ninterface IFormInitialState {\n  errors: any,\n  fields: any,\n  theme: string\n}\n\nconst initialState: IFormInitialState = {\n  errors: Map(),\n  fields: Map(),\n  theme: ''\n}\n\nconst SET_FIELDS = 'SET_FIELDS'\nconst SET_THEME = 'SET_THEME'\nconst SET_ERRORS = 'SET_ERRORS'\nconst SET_CHECK_ERROR = 'SET_CHECK_ERROR'\n\nexport const setFields = (fields: any[], id: string): object => {\n  return {\n    fields: fromJS(fields),\n    id,\n    type: SET_FIELDS\n  }\n}\n\nexport const setTheme = (theme: string): object => {\n  return {\n    theme,\n    type: SET_THEME\n  }\n}\n\nexport const checkAllReqFields = (id: string) => {\n  return (dispatch: any, getState: any) => {\n    const { form: { fields } } = getState()\n    debugger\n    fields.get(id).map((cmps: any): void => {\n      const key = cmps.get('key')\n      const propsCmps = cmps.get('props').toJS()\n      const { children } = propsCmps\n      if (children) {\n        if (Array.isArray(children)) {\n          // TODO: You must complete this part\n          return null\n        }\n        const propsChild = Reflect.get(children, 'props')\n        const { value: valChild, type: typeChild, required: reqChild } = propsChild\n        if (!inputTypes.find((i: any) => i === typeChild) && !reqChild) {\n          return null\n        }\n        const dataValidation = Reflect.get(propsChild, 'data-validation')\n        dispatch(\n          setCheckError(propsChild, key, validationMethod(dataValidation, valChild))\n        )\n      }\n      const { value, type, required } = propsCmps\n      if (!inputTypes.find((i: any) => i === type) && !required) {\n        return null\n      }\n      const dataVal = Reflect.get(propsCmps, 'data-validation')\n      dispatch(\n        setCheckError(propsCmps, key, validationMethod(dataVal, value))\n      )\n    })\n  }\n}\n\nexport const setCheckError = (field: any, key: any, typeError: any): object => {\n  return (dispatch: any, getState: any): any => {\n    const errors = getState().form.errors\n    const { name, value, formid } = field\n    dispatch({\n      errors: analizeErrors(formid, key, name, errors, typeError),\n      type: SET_ERRORS\n    })\n    const fields = fromJS(getState().form.fields.get(formid))\n    const formFields = fields.filter((i: any) => i.get('key') === key)\n    const cmp = analizeFields(formFields, typeError.size === 0, value)\n    const newField = formFields.merge(cmp)\n    const newFields = fields.update(key, () => fromJS(newField.toJS()[0]))\n    return dispatch({\n      fields: newFields,\n      id: formid,\n      type: SET_CHECK_ERROR\n    })\n  }\n}\n\nexport default function form (state = initialState, action = Action): any {\n  const { type, fields, theme, errors, id } = action\n  switch (type) {\n    case SET_FIELDS:\n    case SET_CHECK_ERROR:\n      const fs = state.fields.set(id, fields)\n      return {...state, fields: fs}\n    case SET_ERRORS:\n      return {...state, errors}\n    case SET_THEME:\n      return {...state, theme}\n    default:\n      return state\n  }\n}\n","import { Form } from 'components'\nimport { connect } from 'react-redux'\nimport * as formActionCreators from 'reducers/form/form'\nimport { bindActionCreators } from 'redux'\n\ninterface IState {\n  form: object\n}\n\nconst mapStateToProps = ({ form }: IState, props: any): any => {\n  return { ...form, ...props }\n}\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({\n  ...formActionCreators\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form)\n","import { Text } from 'components'\nimport { connect } from 'react-redux'\nimport { setCheckError } from 'reducers/form/form'\nimport { bindActionCreators } from 'redux'\n\ninterface IState {\n  input: object,\n  form: {\n    theme: string\n  }\n}\n\nconst mapStateToProps = ({ input, form: { theme } }: IState, props: any): any => {\n  return { ...input, ...props, theme }\n}\n\nconst mapDispatchToProps = (dispatch: any): any => bindActionCreators({setCheckError}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Text)\n","import { File } from 'components'\nimport { connect } from 'react-redux'\nimport { setCheckError } from 'reducers/form/form'\nimport { bindActionCreators } from 'redux'\n\ninterface IState {\n  input: object,\n  form: {\n    theme: string\n  }\n}\n\nconst mapStateToProps = ({ input, form: { theme } }: IState, props: any): any => {\n  return { ...input, ...props, theme }\n}\n\nconst mapDispatchToProps = (dispatch: any): any => bindActionCreators({setCheckError}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(File)\n","import { Select } from 'components'\nimport { connect } from 'react-redux'\nimport { setCheckError } from 'reducers/form/form'\nimport { bindActionCreators } from 'redux'\n\ninterface IState {\n  select: object,\n  form: {\n    theme: string,\n    errors: any\n  }\n}\n\nconst mapStateToProps = ({ select, form: { theme, errors } }: IState, props: any): any => {\n  return { ...select, ...props, theme, errors }\n}\n\nconst mapDispatchToProps = (dispatch: any): any => bindActionCreators({setCheckError}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Select)\n","import { combineReducers } from 'redux'\nimport { default as form } from './form/form'\n\nexport default combineReducers({\n  form\n})\n","import { FormContainer } from 'containers'\nimport * as React from 'react'\nimport { Provider } from 'react-redux'\nimport reducers from 'reducers'\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nconst cps = composeWithDevTools(applyMiddleware(thunk))\nconst store = createStore(reducers, cps)\n\nclass RapidForm extends React.Component<any, any> {\n  public render (): JSX.Element {\n    const { children, ...props } = this.props\n    return (\n      <Provider store={store}>\n        <FormContainer {...props}>\n          {children}\n        </FormContainer>\n      </Provider>\n    )\n  }\n}\n\nexport default RapidForm\n"],"sourceRoot":""}